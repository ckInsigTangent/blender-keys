#!/usr/bin/env python3

"""\
Extract all current Blender hotkeys into an Org mode table.
"""

import bpy
import re
import sys

write = sys.stdout.write


replaced_substrings = [
    ('EVT_TWEAK_', 'Tweak '),
    ('NDOF_', ''),
]


replaced_words = {
    'ACCENT_GRAVE': '`',
    'ACTIONMOUSE': 'Action',
    'BACK_SPACE': 'Backspace',
    'BUTTON4MOUSE': '4MB',
    'BUTTON5MOUSE': '5MB',
    'COMMA': ',',
    'DEL': 'Delete',
    'DOWN_ARROW': 'Down',
    'EIGHT': '8',
    'END': 'End',
    'EQUAL': '=',
    'ESC': 'Escape',
    'FIVE': '5',
    'FOUR': '4',
    'HOME': 'Home',
    'INSERT': 'Insert',
    'LEFTMOUSE': 'LMB',
    'LEFT_ALT': 'LeftAlt',
    'LEFT_ARROW': 'Left',
    'LEFT_BRACKET': '[',
    'LEFT_CTRL': 'LeftCtrl',
    'LEFT_SHIFT': 'LeftShift',
    'MIDDLEMOUSE': 'MMB',
    'MINUS': '-',
    'MOUSEMOVE': 'Move',
    'NINE': '9',
    'NONE': None,
    'NUMPAD_0': 'Num0',
    'NUMPAD_1': 'Num1',
    'NUMPAD_2': 'Num2',
    'NUMPAD_3': 'Num3',
    'NUMPAD_4': 'Num4',
    'NUMPAD_5': 'Num5',
    'NUMPAD_6': 'Num6',
    'NUMPAD_7': 'Num7',
    'NUMPAD_8': 'Num8',
    'NUMPAD_9': 'Num9',
    'NUMPAD_ENTER': 'NumEnter',
    'NUMPAD_MINUS': 'Num-',
    'NUMPAD_PERIOD': 'Num.',
    'NUMPAD_PLUS': 'Num+',
    'NUMPAD_SLASH': 'Num/',
    'ONE': '1',
    'PAGE_DOWN': 'PgDn',
    'PAGE_UP': 'PgUp',
    'PERIOD': '.',
    'RET': 'Enter',
    'RIGHTMOUSE': 'RMB',
    'RIGHT_ALT': 'RightAlt',
    'RIGHT_ARROW': 'Right',
    'RIGHT_BRACKET': ']',
    'RIGHT_CTRL': 'RightCtrl',
    'RIGHT_SHIFT': 'RightShift',
    'SELECTMOUSE': 'RMB',
    'SEVEN': '7',
    'SIX': '6',
    'SPACE': 'Space',
    'TAB': 'Tab',
    'THREE': '3',
    'TRACKPADPAN': 'Pan',
    'TRACKPADZOOM': 'Zoom',
    'TWO': '2',
    'UP_ARROW': 'Up',
    'WHEELDOWNMOUSE': 'WheelDn',
    'WHEELINMOUSE': 'WheelIn',
    'WHEELOUTMOUSE': 'WheelOut',
    'WHEELUPMOUSE': 'WheelUp',
    'ZERO': '0',
}


class Main:

    def main(self, *arguments):
        self.info = {}
        self.extract_keys()
        self.write_table()

    def study(self, title, value):
        print('-------------------------------------------------------')
        print(title)
        if hasattr(value, '__iter__'):
            print(value, ':', len(value), 'items')
            value = value[0]
            print()
        print(value)
        print()
        for attribute in dir(value):
            print('%-20s' % attribute, getattr(value, attribute))
        print()

    def extract_keys(self):
        write('\n')
        for keyconfig in bpy.data.window_managers['WinMan'].keyconfigs:
            keyconfig_name = keyconfig.name
            if keyconfig_name != 'Blender':
                # Either 'Blender Addon' or 'Blender User'.
                continue
            for keymap in keyconfig.keymaps:
                keymap_name = keymap.name
                for keymap_item in keymap.keymap_items:
                    hotkey = ''
                    if keymap_item.any:
                        hotkey += 'Any '
                        assert keymap_item.shift
                        assert keymap_item.ctrl
                        assert keymap_item.alt
                    else:
                        assert not keymap_item.oskey
                        if keymap_item.shift:
                            hotkey += 'Shift '
                        if keymap_item.ctrl:
                            hotkey += 'Ctrl '
                        if keymap_item.alt:
                            hotkey += 'Alt '
                    fragments = []
                    for word in keymap_item.type.split():
                        fragment = replaced_words.get(word, word)
                        if fragment is not None:
                            fragments.append(fragment)
                    type = ''.join(fragments)
                    for before, after in replaced_substrings:
                        type = type.replace(before, after)
                    if len(type) == 1:
                        sort1 = 0
                    elif re.match('F[1-9]$', type):
                        sort1 = 2
                    elif re.match('F1[0-9]$', type):
                        sort1 = 3
                    else:
                        sort1 = 1
                    hotkey += type
                    sort2 = len(hotkey.split())
                    if keymap_item.key_modifier != 'NONE':
                        hotkey += ' ' + keymap_item.key_modifier
                    if keymap_item.value == 'DOUBLE_CLICK':
                        hotkey = 'Double ' + hotkey
                    else:
                        assert keymap_item.value in (
                            'ANY', 'CLICK', 'PRESS', 'RELEASE')
                    info = self.info.get(keymap_item.map_type)
                    if info is None:
                        info = self.info[keymap_item.map_type] = []
                    info.append(
                        (keymap_item.map_type, sort1, type,
                         keymap_name, sort2, hotkey, keymap_item.name))

    def write_table(self):

        def separator():
            for counter, width in enumerate(widths):
                if counter == 0:
                    write('|-%s-' % ('-' * width))
                else:
                    write('+-%s-' % ('-' * width))
            write('|\n')

        for map_type, info in sorted(self.info.items()):
            table = []
            widths = None
            previous_all = None
            previous_key = None
            previous_name = None
            for _, _, type, keymap_name, _, hotkey, name in sorted(info):
                all = type, keymap_name, hotkey, name
                if all == previous_all:
                    continue
                previous_all = all
                if (type, keymap_name) == previous_key:
                    keymap_name = ''
                    if name == previous_name:
                        name = ''
                    else:
                        previous_name = name
                else:
                    previous_key = type, keymap_name
                    previous_name = name
                if widths is None:
                    row = keymap_name, hotkey, name
                    table.append((map_type,) + (None,) * (len(row) - 1))
                    widths = [len(map_type)] + [0] * (len(row) - 1)
                else:
                    row = keymap_name, hotkey, name
                for counter, cell in enumerate(row):
                    if cell is not None and len(cell) > widths[counter]:
                        widths[counter] = len(cell)
                table.append(row)

            write('\n')
            separator()
            for count, row in enumerate(table):
                for cell, width in zip(row, widths):
                    if cell is None:
                        cell = ''
                    write('| %*s ' % (-width, cell))
                write('|\n')
                if count == 0:
                    separator()
            separator()


run = Main()
main = run.main

if __name__ == '__main__':
    main(*sys.argv[1:])
