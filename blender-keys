#!/usr/bin/env python3

"""\
Into blender-keys.org, extract all known Blender hotkeys, grouped by key.
Into blender-modes.org, extract all known Blender hotkeys, grouped by mode.
Into blender-operators.org, extract all known Blender operators.
"""

import bpy
import re
import sys


replaced_substrings = [
    ('EVT_TWEAK_', 'Tweak '),
    ('NDOF_', ''),
]


replaced_words = {
    'ACCENT_GRAVE': '`',
    'ACTIONMOUSE': 'LMB',
    'BACK_SPACE': 'Backspace',
    'BUTTON4MOUSE': '4MB',
    'BUTTON5MOUSE': '5MB',
    'COMMA': ',',
    'DEL': 'Delete',
    'DOWN_ARROW': 'Down',
    'EIGHT': '8',
    'END': 'End',
    'EQUAL': '=',
    'ESC': 'Escape',
    'FIVE': '5',
    'FOUR': '4',
    'HOME': 'Home',
    'INSERT': 'Insert',
    'LEFTMOUSE': 'LMB',
    'LEFT_ALT': 'LeftAlt',
    'LEFT_ARROW': 'Left',
    'LEFT_BRACKET': '[',
    'LEFT_CTRL': 'LeftCtrl',
    'LEFT_SHIFT': 'LeftShift',
    'MIDDLEMOUSE': 'MMB',
    'MINUS': '-',
    'MOUSEMOVE': 'Move',
    'NINE': '9',
    'NONE': None,
    'NUMPAD_0': 'Num0',
    'NUMPAD_1': 'Num1',
    'NUMPAD_2': 'Num2',
    'NUMPAD_3': 'Num3',
    'NUMPAD_4': 'Num4',
    'NUMPAD_5': 'Num5',
    'NUMPAD_6': 'Num6',
    'NUMPAD_7': 'Num7',
    'NUMPAD_8': 'Num8',
    'NUMPAD_9': 'Num9',
    'NUMPAD_ENTER': 'NumEnter',
    'NUMPAD_MINUS': 'Num-',
    'NUMPAD_PERIOD': 'Num.',
    'NUMPAD_PLUS': 'Num+',
    'NUMPAD_SLASH': 'Num/',
    'ONE': '1',
    'PAGE_DOWN': 'PgDn',
    'PAGE_UP': 'PgUp',
    'PERIOD': '.',
    'RET': 'Enter',
    'RIGHTMOUSE': 'RMB',
    'RIGHT_ALT': 'RightAlt',
    'RIGHT_ARROW': 'Right',
    'RIGHT_BRACKET': ']',
    'RIGHT_CTRL': 'RightCtrl',
    'RIGHT_SHIFT': 'RightShift',
    'SELECTMOUSE': 'RMB',
    'SEVEN': '7',
    'SIX': '6',
    'SPACE': 'Space',
    'TAB': 'Tab',
    'THREE': '3',
    'TRACKPADPAN': 'Pan',
    'TRACKPADZOOM': 'Zoom',
    'TWO': '2',
    'UP_ARROW': 'Up',
    'WHEELDOWNMOUSE': 'WheelDn',
    'WHEELINMOUSE': 'WheelIn',
    'WHEELOUTMOUSE': 'WheelOut',
    'WHEELUPMOUSE': 'WheelUp',
    'ZERO': '0',
}


class Main:

    def main(self, *arguments):
        self.extract_infos()
        self.extract_operators()
        self.writeorg_keys(Writer('blender-keys.org'))
        self.writeorg_modes(Writer('blender-modes.org'))
        self.writeorg_operators(open('blender-operators.org', 'w').write)

    def extract_infos(self):
        self.key_info = {}
        self.mode_info = {}
        for keyconfig in bpy.data.window_managers['WinMan'].keyconfigs:
            keyconfig_name = keyconfig.name
            if keyconfig_name != 'Blender':
                # Either 'Blender Addon' or 'Blender User'.
                continue
            for keymap in keyconfig.keymaps:
                keymap_name = keymap.name
                for keymap_item in keymap.keymap_items:
                    hotkey = ''
                    if keymap_item.any:
                        hotkey += 'Any '
                        assert keymap_item.shift
                        assert keymap_item.ctrl
                        assert keymap_item.alt
                    else:
                        assert not keymap_item.oskey
                        if keymap_item.shift:
                            hotkey += 'Shift '
                        if keymap_item.ctrl:
                            hotkey += 'Ctrl '
                        if keymap_item.alt:
                            hotkey += 'Alt '
                    type = keymap_item.type
                    assert ' ' not in type, type
                    type = replaced_words.get(type, type) or ''
                    for before, after in replaced_substrings:
                        type = type.replace(before, after)
                    if len(type) == 1:
                        sort1 = 0
                    elif re.match('F[1-9]$', type):
                        sort1 = 2
                    elif re.match('F1[0-9]$', type):
                        sort1 = 3
                    else:
                        sort1 = 1
                    hotkey += type
                    if keymap_item.key_modifier != 'NONE':
                        hotkey += ' ' + keymap_item.key_modifier
                    if keymap_item.value == 'DOUBLE_CLICK':
                        hotkey = 'Double ' + hotkey
                    else:
                        assert keymap_item.value in (
                            'ANY', 'CLICK', 'PRESS', 'RELEASE')
                    sort2 = len(hotkey.split())
                    value = (keymap_item.map_type, sort1, type, keymap_name,
                             sort2, hotkey, keymap_item.name)
                    key_info = self.key_info.get(keymap_item.map_type)
                    if key_info is None:
                        key_info = self.key_info[keymap_item.map_type] = []
                    key_info.append(value)
                    mode_info = self.mode_info.get(keymap_name)
                    if mode_info is None:
                        mode_info = self.mode_info[keymap_name] = []
                    mode_info.append(value)

    def writeorg_keys(self, writer):
        writer.write('#+TITLE: Blender Hot Keys, grouped by key\n')
        for map_type, key_info in sorted(self.key_info.items()):
            writer.write('* %s\n' % map_type.capitalize())
            writer.reset_table()
            previous_all = None
            previous_key = None
            previous_name = None
            previous_type = None
            for (_, _, type, keymap_name, _, hotkey, name
                 ) in sorted(key_info):
                if type != previous_type:
                    previous_type = type
                    writer.add_separator()
                all = type, keymap_name, hotkey, name
                if all == previous_all:
                    continue
                previous_all = all
                if (type, keymap_name) == previous_key:
                    keymap_name = ''
                    if name == previous_name:
                        name = ''
                    else:
                        previous_name = name
                else:
                    previous_key = type, keymap_name
                    previous_name = name
                writer.add_row((keymap_name, hotkey, name))
            writer.add_separator()
            writer.output_table()

    def writeorg_modes(self, writer):
        writer.write('#+TITLE: Blender Hot Keys, grouped by mode\n')
        for keymap_name, mode_info in sorted(self.mode_info.items()):
            writer.write('* %s\n' % keymap_name)
            writer.reset_table()
            previous_all = None
            previous_map_type = None
            previous_name = None
            for (map_type, _, type, keymap_name, _, hotkey, name
                 ) in sorted(mode_info):
                all = map_type, type, keymap_name, hotkey, name
                if all == previous_all:
                    continue
                previous_all = all
                if map_type == previous_map_type:
                    map_type = ''
                else:
                    previous_map_type = map_type
                    writer.add_separator()
                if name == previous_name:
                    name = ''
                else:
                    previous_name = name
                writer.add_row((map_type.capitalize(), hotkey, name))
            writer.add_separator()
            writer.output_table()

    def extract_operators(self):
        self.operator_info = {}
        for module_name in dir(bpy.ops):
            module = getattr(bpy.ops, module_name)
            for submodule_name in dir(module):
                operator = getattr(module, submodule_name)
                line1, line2 = repr(operator).split('\n')
                assert line1.startswith('# '), repr(operator)
                assert line2.startswith('bpy.ops.'), repr(operator)
                # Hmph: there are a few trailing whitespaces.
                description = line1[2:].rstrip()
                group, call = line2[8:].split('.', 1)
                if not description:
                    description = call.split('(', 1)[0]
                group_info = self.operator_info.get(group)
                if group_info is None:
                    group_info = self.operator_info[group] = []
                group_info.append((description, call))

    def writeorg_operators(self, write):
        write('#+TITLE: Blender Operator List\n')
        for group, group_info in sorted(self.operator_info.items()):
            write('* bpy.ops.%s\n' % group)
            for description, call in sorted(group_info):
                write('** %s\n' % description)
                write('#+BEGIN_SRC python\n')
                write('  .%s\n' % call)
                write('#+END_SRC\n')


class Writer:

    def __init__(self, name):
        self.write = open(name, 'w').write
        self.reset_table()

    def add_row(self, row):
        if self.widths is None:
            self.widths = [0] * len(row)
        for counter, cell in enumerate(row):
            if cell is not None and len(cell) > self.widths[counter]:
                self.widths[counter] = len(cell)
        self.table.append(row)

    def add_separator(self):
        self.table.append(None)

    def output_table(self):
        for row in self.table:
            if row is None:
                first = True
                for width in self.widths:
                    if width > 0:
                        if first:
                            self.write('|-%s-' % ('-' * width))
                            first = False
                        else:
                            self.write('+-%s-' % ('-' * width))
                self.write('|\n')
            else:
                for cell, width in zip(row, self.widths):
                    if width > 0:
                        self.write('| %*s ' % (-width, cell or ''))
                self.write('|\n')

    def reset_table(self):
        self.table = []
        self.widths = None


run = Main()
main = run.main

if __name__ == '__main__':
    main(*sys.argv[1:])
